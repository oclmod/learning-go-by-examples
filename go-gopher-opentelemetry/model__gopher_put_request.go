/*
gophers-api

HTTP server that handle cute Gophers.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gopherssdkgo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GopherPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GopherPutRequest{}

// GopherPutRequest struct for GopherPutRequest
type GopherPutRequest struct {
	Name string `json:"name"`
	Displayname string `json:"displayname"`
	Url string `json:"url"`
}

type _GopherPutRequest GopherPutRequest

// NewGopherPutRequest instantiates a new GopherPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGopherPutRequest(name string, displayname string, url string) *GopherPutRequest {
	this := GopherPutRequest{}
	this.Name = name
	this.Displayname = displayname
	this.Url = url
	return &this
}

// NewGopherPutRequestWithDefaults instantiates a new GopherPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGopherPutRequestWithDefaults() *GopherPutRequest {
	this := GopherPutRequest{}
	return &this
}

// GetName returns the Name field value
func (o *GopherPutRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GopherPutRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GopherPutRequest) SetName(v string) {
	o.Name = v
}

// GetDisplayname returns the Displayname field value
func (o *GopherPutRequest) GetDisplayname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Displayname
}

// GetDisplaynameOk returns a tuple with the Displayname field value
// and a boolean to check if the value has been set.
func (o *GopherPutRequest) GetDisplaynameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Displayname, true
}

// SetDisplayname sets field value
func (o *GopherPutRequest) SetDisplayname(v string) {
	o.Displayname = v
}

// GetUrl returns the Url field value
func (o *GopherPutRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *GopherPutRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *GopherPutRequest) SetUrl(v string) {
	o.Url = v
}

func (o GopherPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GopherPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["displayname"] = o.Displayname
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *GopherPutRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"displayname",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGopherPutRequest := _GopherPutRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGopherPutRequest)

	if err != nil {
		return err
	}

	*o = GopherPutRequest(varGopherPutRequest)

	return err
}

type NullableGopherPutRequest struct {
	value *GopherPutRequest
	isSet bool
}

func (v NullableGopherPutRequest) Get() *GopherPutRequest {
	return v.value
}

func (v *NullableGopherPutRequest) Set(val *GopherPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGopherPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGopherPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGopherPutRequest(val *GopherPutRequest) *NullableGopherPutRequest {
	return &NullableGopherPutRequest{value: val, isSet: true}
}

func (v NullableGopherPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGopherPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


